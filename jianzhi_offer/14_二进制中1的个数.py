# encoding: utf-8
"""
 @project:Data_Structure&&Algorithm
 @author: Jiang Hui
 @language:Python 3.7.2 [GCC 7.3.0] :: Anaconda, Inc. on linux
 @time: 4/9/19 11:39 AM
 @desc: 输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示
"""

"""
【科普】
 关于十进制数在32位计算机中的二进制表示：（在计算机系统中，数值一律用补码来表示和存储）【十六进制负数以原码存储在内存上】
 
    1. 正数 5的表示法： 00000000 00000000 00000000 00000101 ,十六进制为 0x00000005 （正数的原码，反码，补码相同）
    
    2. 负数-5的表示法： （在计算机中，负数以原码的补码形式表示）
        -5的原码： 10000000 00000000 00000000 00000101
        -5的反码： 11111111 11111111 11111111 11111010 （除符号位以外，其他全部按位取反）
        -5的补码： 11111111 11111111 11111111 11111011 （在反码的基础上，加1）
        所以，计算机中-5表示为：11111111 11111111 11111111 11111011，十六进制为 0xfffffffb
    
    3. -1的表示法：
                  原码为：10000000 00000000 00000000 00000001
                  反码为：11111111 11111111 11111111 11111110
                  补码为：11111111 11111111 11111111 11111111   十六进制为：0xffffffff
    
        所以根据对于右移运算的理解，如果是负数，右移多少位，最左边添加多少个1，所以-1右移，结果始终为-1!
    
 关于二进制位运算，左移和右移的运算规则：
    1. 正数
        左移n位，最左边的n个数丢掉，右边补上n个0；
        右移n位，最右边的n个数丢掉，左边补上n个0；
    
    2. 负数
        左移n位，最左边的n个数丢掉，右边补上n个0；（同上）
        右移n位，最右边的n个数丢掉，左边补上n个1；（补1而不是0）
        
 整数的左移和右移运算比乘除2的效率高的多哦，所以在实际编程中尽可能多地用移位运算符代替乘除法.
 
 关于Python长整数类型的数，理论上可以为无限位，一般编程语言，int类型为32位，所以一方面为了避免移位运算中发生死循环，
 另一方面，保证我们的数与其他语言一致，我们把n进行转换，n = n&0xffffffff，即限制整数n的二进制表示为32位，不管n是正数还是负数，在
 计算机中，32的表示是一样的，只是实际代表的值不一样，但是对于我们用Python进行位运算时，一定要注意转换，限制整数的边界在32位!
"""


class Solution:
    def NumberOf1(self, n):
        count = 0
        n = n & 0xffffffff
        while n:
            count += n & 1
            n = n >> 1
        return count


if __name__ == '__main__':
    sol = Solution()
    print(sol.NumberOf1(3))
