# encoding: utf-8
"""
 @project:data_structure_and_algorithm
 @author: Jiang Hui
 @language:Python 3.7.2 [GCC 7.3.0] :: Anaconda, Inc. on linux
 @time: 4/22/19 8:30 PM
 @desc: 哈希查找法，典型的用空间换时间的算法
"""

"""
 1.什么是哈希表？
    哈希表（Hash table，也叫散列表），是根据关键码、值(Key value)直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置
 来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。
    
    记录的存储位置=f(关键字)

    这里的对应关系f称为散列函数，又称为哈希（Hash函数），采用散列技术将记录存储在一块连续的存储空间中，这块连续存储空间称为散列表或哈希表
 
    哈希表就是把Key通过对数组长度进行取余，取余结果就当作数组的下标（俗称取余法，但是要注意产生冲突）将value存储在以该数字为下标的数组空间。
    
    而当使用哈希表进行查询的时候，就是再次使用哈希函数将key转换为对应的数组下标，并定位到该空间获取value，如此一来，就可以充分利用到数组的、
 定位性能进行数据定位。

    为了避免冲突，我们可以将链表与数组结合起来，组成一个“链表的数组”，有效的解决了映射冲突的问题，这种做法称为“拉链法”，另外一种解决办法是线性
 探测法（开放定址法的简单实现），如果一个键的散列值被另一个键占用时，直接检查散列表中下一个位置的索引值，如果被占用，继续向右移动，直到一个为空
 的地址为止。
 
 2.复杂度分析
    哈希表是一个在时间和空间上做出权衡的经典例子。如果没有内存限制，那么可以直接将键作为数组的索引。那么所有的查找时间复杂度为O(1)；如果没有
 时间限制，那么我们可以使用无序数组并进行顺序查找，这样只需要很少的内存，但是查找时间复杂度为O(n)。
 
    哈希表使用了适度的时间和空间来在这两个极端之间找到了平衡，只需要调整哈希函数算法即可在时间和空间上做出取舍。
"""
